---
############################
# THIS IS THE UBUNTU SECTION
############################

# Gets a list of package updates
- name: apt-get update
  apt:
    update_cache: yes
  when: ansible_distribution == "Ubuntu"

- name: Gets a list of pending updates
  shell: apt-get --simulate dist-upgrade
  args:
    warn: false
  ignore_errors: yes
  register: package_simulate
  when: ansible_distribution == "Ubuntu"

# Removes un-needed dependencies and then upgrades
- name: apt-get autoremove
  apt:
    autoremove: yes
  when: ansible_distribution == "Ubuntu"

- name: apt-get upgrade
  apt:
    upgrade: dist
  register: update
  when: ansible_distribution == "Ubuntu"

# Restart required?
- name: check if reboot is needed
  stat: path=/var/run/reboot-required
  register: check_reboot
  when: ansible_distribution == "Ubuntu"

# calculates restart time IF required
- name: get time
  set_fact:
    reboot_required: "'Yes'"
    restart_msg: "this machine will resart at "
    hour: "{{ ansible_date_time.hour | int + 1 }}"
    minute: "{{ ansible_date_time.minute }}"
    second: "{{ ansible_date_time.second }}"
  when: check_reboot.stat.exists and ansible_distribution == "Ubuntu"

- name: set time
  set_fact:
    time: '{{ hour }}:{{ minute }}:{{ second }}'
  when: check_reboot.stat.exists and ansible_distribution == "Ubuntu"

# Email IF there was an update
- include: ./tasks/mail.yml
  when: update.changed and ansible_distribution == "Ubuntu"

# Ends playbook if the file DOES NOT exist
- meta: end_host
  when: not check_reboot.stat.exists and ansible_distribution == "Ubuntu"

# Ininitate system restart
- name: reboot system
  reboot:
    msg: "Reboot initiated by Ansible due to system updates"
    pre_reboot_delay: 3600
    post_reboot_delay: 300
    reboot_timeout: 5400
  when: ansible_distribution == "Ubuntu"

############################
# THIS IS THE REDHAT SECTION
############################

# Gets a list of packages to be installed
- name: Gets a list of pending packages
  shell: yum check-update
  args:
    warn: false
  ignore_errors: yes
  register: package_simulate
  when: ansible_distribution == "RedHat"

# Removes un-needed dependency and upgrades packages
- name: yum -y autoremove
  yum:
    autoremove: yes
  when: ansible_distribution == "RedHat"

- name: yum -y update
  yum:
    name: '*'
    state: latest
    update_cache: yes
  register: update
  when: ansible_distribution == "RedHat"

# Re-sync with RedHat Errata
- name: Remove old packages.json file
  file:
    path: /var/lib/rhsm/packages/packages.json
    state: absent
  when: ansible_distribution == "RedHat"

- name: Stop rhsmcertd service
  service:
    name: rhsmcertd
    state: stopped
  when: ansible_distribution == "RedHat"

- name: Start rhsmcertd service
  shell: rhsmcertd --now
  when: ansible_distribution == "RedHat"

# Restart required?
- name: check if reboot is needed
  stat:
    path: /var/run/reboot-required
  register: check_reboot
  when: ansible_distribution == "RedHat"

# Calculates restart time IF required
- name: get time
  set_fact:
    reboot_required: "'Yes'"
    restart_msg: "this machine will resart at "
    hour: "{{ ansible_date_time.hour | int + 1 }}"
    minute: "{{ ansible_date_time.minute }}"
    second: "{{ ansible_date_time.second }}"
  when: check_reboot.stat.exists and ansible_distribution == "RedHat"

- name: set time
  set_fact:
    time: '{{ hour }}:{{ minute }}:{{ second }}'
  when: check_reboot.stat.exists and ansible_distribution == "RedHat"

# Email if there was an update
- include: ./tasks/mail.yml
  when: update.changed and ansible_distribution == "RedHat"

# Ends playbook if file DOES NOT exist
- meta: end_host
  when: not check_reboot.stat.exists and ansible_distribution == "RedHat"

# Schedule remote system reboot
- name: reboot system
  reboot:
    msg: "Reboot initiated by Ansible due to system updates"
    pre_reboot_delay: 3600
    post_reboot_delay: 300
    reboot_timeout: 5400
  when: ansible_distribution == "RedHat"
